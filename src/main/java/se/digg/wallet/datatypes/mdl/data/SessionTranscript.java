// SPDX-FileCopyrightText: 2025 Digg - Agency for Digital Government
//
// SPDX-License-Identifier: EUPL-1.2

package se.digg.wallet.datatypes.mdl.data;

import com.upokecenter.cbor.CBORObject;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Objects;
import lombok.Getter;

/**
 * Provides a session transcript for use with OpenID4VP
 */
@Getter
public class SessionTranscript {

  /** Requester client ID */
  private final String clientId;
  /** Presentation response URL */
  private final String responseUri;
  /** Request nonce */
  private final String nonce;
  /** Wallet generated response nonce */
  private final String mdocGeneratedNonce;

  /**
   * Constructs a new SessionTranscript with the provided parameters.
   *
   * @param clientId the identifier for the requester client
   * @param responseUri the URL used for presenting the response
   * @param nonce the request nonce
   * @param mdocGeneratedNonce the nonce generated by the wallet in the response
   */
  public SessionTranscript(
    String clientId,
    String responseUri,
    String nonce,
    String mdocGeneratedNonce
  ) {
    this.clientId = clientId;
    this.responseUri = responseUri;
    this.nonce = nonce;
    this.mdocGeneratedNonce = mdocGeneratedNonce;
  }

  /**
   * Converts the session transcript data into a CBOR object representation.
   * This includes generating a handover array containing hashed items of
   * required fields, as well as structuring the session transcript array.
   *
   * @return a CBORObject representation of the session transcript,
   *         containing the handover data and session structure.
   * @throws NullPointerException if any required field (clientId, responseUri,
   *         nonce, or mdocGeneratedNonce) is null.
   */
  public CBORObject toCborObject() {
    Objects.requireNonNull(this.clientId, "clientId must not be null");
    Objects.requireNonNull(this.responseUri, "responseUri must not be null");
    Objects.requireNonNull(this.nonce, "nonce must not be null");
    Objects.requireNonNull(
      this.mdocGeneratedNonce,
      "mdocGeneratedNonce must not be null"
    );

    CBORObject handover = CBORObject.NewArray();
    handover.Add(getHashItem(this.clientId, this.mdocGeneratedNonce));
    handover.Add(getHashItem(this.responseUri, this.mdocGeneratedNonce));
    handover.Add(CBORObject.FromString(this.nonce));

    CBORObject sessionTranscript = CBORObject.NewArray();
    sessionTranscript.Add(null);
    sessionTranscript.Add(null);
    sessionTranscript.Add(handover);

    return sessionTranscript;
  }

  /**
   * Generates a CBOR object containing a hash derived from the provided client ID and
   * mdoc-generated nonce using the SHA-256 algorithm.
   *
   * @param clientId the ID of the client, used as one of the input parameters for the hash
   * @param mdocGeneratedNonce the nonce generated by the mobile document (mdoc),
   *                           used as the other input parameter for the hash
   * @return a CBORObject representing the SHA-256 hash of the combined inputs
   * @throws RuntimeException if the SHA-256 algorithm is not available
   */
  private CBORObject getHashItem(String clientId, String mdocGeneratedNonce) {
    try {
      MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
      CBORObject digestParamArray = CBORObject.NewArray();
      digestParamArray.Add(CBORObject.FromString(clientId));
      digestParamArray.Add(CBORObject.FromString(mdocGeneratedNonce));
      messageDigest.update(digestParamArray.EncodeToBytes());
      return CBORObject.FromByteArray(messageDigest.digest());
    } catch (NoSuchAlgorithmException e) {
      throw new RuntimeException(e);
    }
  }
}
